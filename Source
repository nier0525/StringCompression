#include <iostream>
#include <vector>
#include <queue>
#include <set>
#include <string>
#include <algorithm>
using namespace std;

int String_Compression(__in string _src)
{		
	// 전달 받은 문자열 길이의 반
	int half_len = _src.length() / 2;

	// 길이가 2 이하인 문자열은 압축하여도 의미가 없으므로 예외 처리
	if (half_len < 2) return _src.length();

	vector<int> results;	// 결과값들을 담을 벡터 컨테이너
	string str = _src;	// 매개변수 복사

	int i, j = 0;

	// 최대 현재 문자열 길이의 반에 해당하는 자리수 까지는 압축은 유효하다.
	// 하지만 그 이상의 자리수는 압축을 하여도 유효하지 않다.
	// 그렇기 때문에 문자열 길이의 반만 검사한다.
	for (i = 1; i <= half_len; i++)
	{
		queue<string> que;	// 문자열 압축 결과를 담을 큐
		vector<string> temps;	// 자리수대로 문자열을 분할 시켜 저장할 벡터
		int count = 0;	// 압축 가능한 개수
		int position = 0;	// 큐에 담기지 않은 문자열 위치값
		int last = 0;
				
		for (j = 0; j <= str.length() - i; j += i)
		{
			// 자리수에 맞게 문자열을 분할하여 벡터에 저장하는 작업
			// ex. ab, cd, cd . . .		
			temps.push_back(str.substr(j, i));
			last = j + i;	// 분할되지 않아 남은 문자열을 마지막에 붙히기 위해 필요한 위치값
		}
		
		for (j = 0; j < temps.size() - 1; j++)
		{
			// 현재 문자와 다음 문자가 같은 지 확인
			if (temps[j] == temps[j + 1])		
				count++;				
			
			else
			{
				string temp = "";
				
				if (count == 0)
				{
					temp += temps[position];	// 현재 위치의 문자 저장
					position++;	// 다음 위치 이동
				}
				else
				{
					temp += to_string(count + 1);	// 압축한 개수 문자로 캐스팅
					temp += temps[position];		// 압축한 문자 저장

					position += (count + 1);		// 압축한 개수 만큼 비례하여 위치 이동
					count = 0;	// 압축 개수 초기화
				}
				que.push(temp);	// 큐 삽입
			}
		}

		// 반복문이 한 번 덜 돌기 때문에 마지막 추가 작업
		// 마지막 과정에서 문자 압축이 가능한 경우
		if (count != 0)
			que.push(to_string(count + 1) + temps[position]);
		// 불가능한 경우
		else
			que.push(temps[position]);

		// 큐에 쌓인 문자를 차례차례 재조립
		string result = "";
		while (!que.empty())
		{
			result += que.front();
			que.pop();
		}

		// 위에서 분할되지 않고 남은 문자 추가
		result += str.substr(last, str.length() - last);
		// 재조립이 완성된 문자열의 길이 저장
		results.push_back(result.length());
	}

	cout << "Answer : " << *min_element(results.begin(), results.end()) << endl;
	// 문자열 벡터에 저장된 문자 중 가장 길이가 작은 문자열 찾기
	return *min_element(results.begin(), results.end());
}

int main()
{	
	String_Compression("aabbaccc");
	String_Compression("ababcdcdababcdcd");
	String_Compression("abcdcd");
	String_Compression("abcabc");	
	String_Compression("abcdefg");
	String_Compression("abababcd");
	String_Compression("abcdefgabcdefgabcdefg");
}
